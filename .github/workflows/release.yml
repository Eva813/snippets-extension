name: Ëá™ÂãïÂåñÁôºÂ∏É

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'ÁôºÂ∏ÉÁâàÊú¨ (‰æãÂ¶Ç: v1.0.0)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Ê™¢Âá∫Á®ãÂºèÁ¢º
        uses: actions/checkout@v4

      - name: ÂÆâË£ù pnpm
        uses: pnpm/action-setup@v4

      - name: Ë®≠ÂÆö Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: pnpm

      - name: ÂÆâË£ùÁõ∏‰æùÂ•ó‰ª∂
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Ë®≠ÂÆöÁâàÊú¨Ëôü
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Ëá™ÂãïÂêåÊ≠• manifest.json ÁâàÊú¨Ëôü
        run: |
          VERSION_NUMBER="${{ steps.version.outputs.version_number }}"
          MANIFEST_PATH="chrome-extension/manifest.json"
          if [ -f "$MANIFEST_PATH" ]; then
            jq --arg version "$VERSION_NUMBER" '.version = $version' "$MANIFEST_PATH" > tmp_manifest.json
            mv tmp_manifest.json "$MANIFEST_PATH"
            echo "Â∑≤Ëá™ÂãïÊõ¥Êñ∞ manifest.json ÁâàÊú¨ËôüÁÇ∫ $VERSION_NUMBER"
          else
            echo "Êâæ‰∏çÂà∞ $MANIFEST_PATHÔºåÁï•ÈÅéÁâàÊú¨ËôüÂêåÊ≠•"
          fi

      - name: Âª∫ÊßãÊâÄÊúâÈ†ÅÈù¢ËàáÂ•ó‰ª∂
        run: pnpm build

      - name: Áî¢ÁîüÂ£ìÁ∏ÆÊ™î
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PACKAGE_NAME="snippets-extension_${VERSION}.zip"
          cd chrome-extension
          zip -r "../$PACKAGE_NAME" . -x "*.git*" "*.DS_Store*" "*node_modules*"
          cd ..
          echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV

      - name: Âª∫Á´ã GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Snippets Extension ${{ steps.version.outputs.version }}
          files: ${{ env.PACKAGE_NAME }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Chrome Web Store Ëá™ÂãïÁôºÂ∏É
        if: vars.ENABLE_CHROME_STORE != 'false'
        env:
          CHROME_CLIENT_ID: ${{ secrets.CHROME_CLIENT_ID }}
          CHROME_CLIENT_SECRET: ${{ secrets.CHROME_CLIENT_SECRET }}
          CHROME_REFRESH_TOKEN: ${{ secrets.CHROME_REFRESH_TOKEN }}
          CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}
        run: |
          ACCESS_TOKEN=$(curl -s -X POST \
            -d "client_id=$CHROME_CLIENT_ID" \
            -d "client_secret=$CHROME_CLIENT_SECRET" \
            -d "refresh_token=$CHROME_REFRESH_TOKEN" \
            -d "grant_type=refresh_token" \
            https://oauth2.googleapis.com/token | jq -r .access_token)

          if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "‚ùå ÁÑ°Ê≥ïÂèñÂæó Chrome Web Store API Â≠òÂèñÊ¨äÊùñ"
            exit 1
          fi

          echo "üöÄ ‰∏äÂÇ≥Â•ó‰ª∂Âà∞ Chrome Web Store..."
          UPLOAD_RESPONSE=$(curl -s -X PUT \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "x-goog-api-version: 2" \
            -T "${{ env.PACKAGE_NAME }}" \
            "https://www.googleapis.com/upload/chromewebstore/v1.1/items/$CHROME_EXTENSION_ID")

          echo "‰∏äÂÇ≥ÂõûÊáâ: $UPLOAD_RESPONSE"

          UPLOAD_STATE=$(echo "$UPLOAD_RESPONSE" | jq -r .uploadState // "FAILURE")
          if [ "$UPLOAD_STATE" != "SUCCESS" ]; then
            echo "‚ùå Â•ó‰ª∂‰∏äÂÇ≥Â§±Êïó: $UPLOAD_RESPONSE"
            exit 1
          fi

          echo "üì¢ ÁôºÂ∏ÉÂà∞ Chrome Web Store..."
          PUBLISH_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "x-goog-api-version: 2" \
            -H "Content-Length: 0" \
            "https://www.googleapis.com/chromewebstore/v1.1/items/$CHROME_EXTENSION_ID/publish")

          echo "ÁôºÂ∏ÉÂõûÊáâ: $PUBLISH_RESPONSE"

          STATUS=$(echo "$PUBLISH_RESPONSE" | jq -r .status[0] // "FAILURE")
          if [ "$STATUS" = "OK" ]; then
            echo "‚úÖ ÊàêÂäüÁôºÂ∏ÉÂà∞ Chrome Web StoreÔºÅ"
          else
            echo "‚ùå Chrome Web Store ÁôºÂ∏ÉÂ§±Êïó: $PUBLISH_RESPONSE"
          fi
